// Code generated by MockGen. DO NOT EDIT.
// Source: command_handler.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	entity "pstgrprof/server/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCommand mocks base method.
func (m *MockService) CreateCommand(c context.Context, req *entity.CreateCommandReq) (*entity.CreateCommandRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", c, req)
	ret0, _ := ret[0].(*entity.CreateCommandRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockServiceMockRecorder) CreateCommand(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockService)(nil).CreateCommand), c, req)
}

// GetAllCommands mocks base method.
func (m *MockService) GetAllCommands(c context.Context) (*[]entity.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommands", c)
	ret0, _ := ret[0].(*[]entity.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommands indicates an expected call of GetAllCommands.
func (mr *MockServiceMockRecorder) GetAllCommands(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommands", reflect.TypeOf((*MockService)(nil).GetAllCommands), c)
}

// GetCommandById mocks base method.
func (m *MockService) GetCommandById(c context.Context, id string) (*entity.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandById", c, id)
	ret0, _ := ret[0].(*entity.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandById indicates an expected call of GetCommandById.
func (mr *MockServiceMockRecorder) GetCommandById(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandById", reflect.TypeOf((*MockService)(nil).GetCommandById), c, id)
}
